@page "/categories"
@inject CategoryService CategoryService
@inject NavigationManager NavigationManager
@using UTS_Blazor.Services
@inject ApiService ApiService
@using UTS_Blazor.Models
@rendermode InteractiveServer

<h3 class="text-2xl font-bold mb-4">Categories Management</h3>

<div class="flex items-center space-x-4 mb-4">
    <button class="bg-blue-500 text-white font-bold py-2 px-4 rounded hover:bg-blue-700" @onclick="CreateNewCategory">Add New Category</button>
    <input type="text" placeholder="Search categories..." @bind="searchTerm" class="p-2 border border-gray-300 rounded w-1/3" @oninput="e => UpdateFilteredCategories(e)" />
</div>

@if (filteredCategories != null && filteredCategories.Any())
{
    <table class="category-table w-full border-collapse mt-4">
        <thead>
            <tr>
                <th class="border px-4 py-2">Category ID</th>
                <th class="border px-4 py-2">Name</th>
                <th class="border px-4 py-2">Description</th>
                <th class="border px-4 py-2">Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var category in pagedCategories)
            {
                <tr>
                    <td class="border px-4 py-2">@category.CategoryId</td>
                    <td class="border px-4 py-2">@category.Name</td>
                    <td class="border px-4 py-2">@category.Description</td>
                    <td class="border px-4 py-2">
                        <button class="bg-yellow-500 text-white py-1 px-3 rounded hover:bg-yellow-700" @onclick="() => EditCategory(category.CategoryId)">Edit</button>
                        <button class="bg-red-500 text-white py-1 px-3 rounded hover:bg-red-700" @onclick="() => DeleteCategory(category.CategoryId)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <div class="pagination mt-4">
        <button @onclick="PreviousPage" disabled="@(!CanGoToPreviousPage)" class="bg-gray-500 text-white py-1 px-3 rounded mr-2">Previous</button>
        <span>Page @currentPage of @totalPages</span>
        <button @onclick="NextPage" disabled="@(!CanGoToNextPage)" class="bg-gray-500 text-white py-1 px-3 rounded ml-2">Next</button>
    </div>
}
else
{
    <p>Loading categories...</p>
}

@code {
    private List<Category> categories;
    private List<Category> filteredCategories;
    private List<Category> pagedCategories;
    private string searchTerm = "";
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages => (int)Math.Ceiling((double)filteredCategories.Count / pageSize);

    protected override async Task OnInitializedAsync()
    {
        await LoadCategories();
        UpdatePagedCategories();
    }
    private void UpdateFilteredCategories(ChangeEventArgs e)
    {
        currentPage = 1; // Reset to the first page on new search
        searchTerm = e.Value?.ToString() ?? string.Empty;

        filteredCategories = string.IsNullOrWhiteSpace(searchTerm)
            ? categories
            : categories.Where(c => (c.Name?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false)).ToList();

        UpdatePagedCategories();
    }

    private async Task LoadCategories()
    {
        categories = await ApiService.GetCategoriesAsync();
        filteredCategories = categories;
        UpdatePagedCategories();
    }

    private void UpdateFilteredCategories()
    {
        filteredCategories = string.IsNullOrWhiteSpace(searchTerm)
            ? categories
            : categories.Where(c => c.Name?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false).ToList();

        currentPage = 1;
        UpdatePagedCategories();
    }

    private void UpdatePagedCategories()
    {
        pagedCategories = filteredCategories
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();
    }

    private void NextPage()
    {
        if (CanGoToNextPage)
        {
            currentPage++;
            UpdatePagedCategories();
        }
    }

    private void PreviousPage()
    {
        if (CanGoToPreviousPage)
        {
            currentPage--;
            UpdatePagedCategories();
        }
    }

    private bool CanGoToNextPage => currentPage < totalPages;
    private bool CanGoToPreviousPage => currentPage > 1;

    private void CreateNewCategory()
    {
        NavigationManager.NavigateTo("/categories/create");
    }

    private void EditCategory(int categoryId)
    {
        NavigationManager.NavigateTo($"/categories/edit/{categoryId}");
    }

    private async Task DeleteCategory(int categoryId)
    {
        try
        {
            await ApiService.DeleteCategoryAsync(categoryId);
            await LoadCategories();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error deleting category with ID {categoryId}: {ex.Message}");
        }
    }
}

<style>
    .category-table {
        width: 100%;
        border-collapse: collapse;
    }

        .category-table th, .category-table td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: center;
        }

        .category-table th {
            background-color: #f4f4f4;
            font-weight: bold;
        }

    .pagination {
        display: flex;
        justify-content: center;
        align-items: center;
        margin-top: 16px;
        margin-bottom: 20px;
    }

        .pagination button {
            margin: 0 10px;
            padding: 8px 12px;
            border-radius: 4px;
        }

        .pagination span {
            font-weight: bold;
        }
</style>
